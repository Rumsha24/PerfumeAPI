@model List<PerfumeAPI.Models.Entities.Order>
@{
    Layout = "_Layout";
    ViewData["Title"] = "Your Orders | NOIRE ESSENCE";
}

<style>
    .orders-container {
        max-width: 1200px;
        margin: 30px auto;
        padding: 0 15px;
    }

    .order-card {
        background: white;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .order-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
    }

    .order-items {
        margin-top: 15px;
    }

    .item-card {
        display: flex;
        margin-bottom: 15px;
        padding-bottom: 15px;
        border-bottom: 1px dashed #eee;
    }

    .item-image {
        width: 80px;
        height: 80px;
        object-fit: contain;
        margin-right: 15px;
    }

    .status-badge {
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 0.8rem;
    }

    .status-processing {
        background: #fff3cd;
        color: #856404;
    }

    .status-shipped {
        background: #cce5ff;
        color: #004085;
    }

    .status-delivered {
        background: #d4edda;
        color: #155724;
    }
</style>

<div class="orders-container">
    <h1>Your Orders</h1>

    @if (Model.Any())
    {
        @foreach (var order in Model)
        {
            <div class="order-card">
                <div class="order-header">
                    <div>
                        <strong>Order #@order.OrderNumber</strong>
                        <div class="text-muted small">Placed on @order.OrderDate.ToString("MMMM dd, yyyy")</div>
                    </div>
                    <div>
                        <span class="status-badge status-@order.Status.ToLower()">@order.Status</span>
                    </div>
                </div>

                <div class="order-summary">
                    <div>Total: <strong>@order.TotalAmount.ToString("C")</strong></div>
                    <div>Shipping to: @order.ShippingAddress</div>
                </div>

                <div class="order-items">
                    <h5>Items (@order.Items.Count)</h5>
                    @foreach (var item in order.Items)
                    {
                        <div class="item-card">
                            @if (item.Product != null)
                            {
                                <img src="@(item.Product.ImageUrl ?? "/images/default-perfume.jpg")"
                                     class="item-image"
                                     onerror="this.onerror=null;this.src='/images/default-perfume.jpg';">
                                <div>
                                    <div>@item.Product.Name</div>
                                    <div class="text-muted">@item.Quantity × @item.PriceAtPurchase.ToString("C")</div>
                                    <div><strong>@((item.Quantity * item.PriceAtPurchase).ToString("C"))</strong></div>
                                </div>
                            }
                        </div>
                    }
                </div>

                <div class="text-end">
                    <a href="@Url.Action("Details", new { id = order.Id })" class="btn btn-outline-primary">
                        Order Details
                    </a>
                </div>
            </div>
        }
    }
    else
    {
        <div class="alert alert-info">
            You haven't placed any orders yet.
        </div>
    }
</div>